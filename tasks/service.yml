---
  - name: install service specific packages for EL6
    yum: "name={{item}} state=present"
    with_items:
      - "mysql"
      - "mysql-server"
      - "mysql-devel"
      - "lua-devel"
      - "MySQL-python"
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start and enable mysql
    service: name=mysqld state=started enabled=yes
    register: mysql_start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: install service specific packages for EL7
    yum: "name={{item}} state=present"
    register: install_slurm_packages
    with_items:
      - "mariadb"
      - "mariadb-server"
      - "mariadb-devel"
      - "lua-devel"
      - "MySQL-python"
      - "mailx"
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: start and enable mariadb on EL7
    service: name=mariadb state=started enabled=yes
    register: mariadb_start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: restart mariadb after install
    service: name=mariadb state=restarted
    when: install_slurm_packages.changed

  - name: cat /etc/my.cnf
    command: cat /etc/my.cnf
    register: slurm_mariadb_cnf
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: print slurm_mariadb_cnf
    debug: "var=slurm_mariadb_cnf"
    tags: debug
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: systemctl status mariadb
    command: systemctl status mariadb
    register: systemctl_slurm_status
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: print systemctl_slurm_status
    debug: "var=systemctl_slurm_status"
    tags: debug
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: wait for mysql in port 3306 to start
    wait_for: port=3306 delay=10 timeout=60

  - name: create slurm acct db
    mysql_db: name=slurm_acct_db state=present

  - name: check if slurm db user exists
    mysql_user: "name=slurm state=present"
    register: mysqlslurmuser
    ignore_errors: yes
    tags: debug

  - name: print mysqlslurmuser
    debug: "var=mysqlslurmuser"
    tags: debug

  - name: slurm_mysql_password variable must be set
    assert:
      that: "slurm_mysql_password is defined"

  - name: create slurm db user if it does not exist
    mysql_user: "name=slurm password={{ slurm_mysql_passwordÂ }} priv=slurm_acct_db.*:ALL state=present"
    when: mysqlslurmuser|failed

  - name: does the munge.key exist?
    stat: path=/etc/munge/munge.key
    register: mungekeystat
    always_run: True
    ignore_errors: True

  - name: create munge key
    command: /usr/sbin/create-munge-key creates=/etc/munge/munge.key
    register: mungekeygen
    when: mungekeystat is defined and mungekeystat.stat.exists == False

  - name: get munge key for distribution to nodes
    fetch: src=/etc/munge/munge.key
           dest=files/munge.key
           fail_on_missing=yes
           flat=yes

  - name: create build dirs
    file: path="/root/rpmbuild/{{ item }}" state=directory
    with_items:
        - "BUILD"
        - "RPMS"
        - "SOURCES"
        - "SPECS"
        - "SRPMS"
    when: slurm_build == True

  - name: download Slurm source
    get_url: url="http://www.schedmd.com/download/latest/slurm-{{ slurm_version }}.tar.bz2" dest="/root/rpmbuild/SOURCES/slurm-{{ slurm_version }}.tar.bz2"
    when: slurm_build == True

  - name: Extract Slurm source 2
    command: "tar -xjf /root/rpmbuild/SOURCES/slurm-{{ slurm_version}}.tar.bz2 -C /root/rpmbuild/SOURCES/ creates=/root/rpmbuild/SOURCES/slurm-{{ slurm_version }}"
    when: slurm_build == True

  - name: build Slurm
    command: "{{ item }} chdir=/root/rpmbuild/SOURCES/slurm-{{ slurm_version}}/ creates=/root/rpmbuild/RPMS/x86_64/slurm-{{ slurm_version }}-1.el{{major_release}}.x86_64.rpm"
    with_items:
       - rpmbuild -bb --with lua  slurm.spec
       #- ./configure
       #- "/usr/bin/make"
       #- "/usr/bin/make install"
    when: slurm_build == True

  - name: get slurm rpms to then distribute them to the nodes
    fetch: src={{ item }}
           dest=roles/slurm_common/files/
           fail_on_missing=yes
           flat=yes
    with_items:
         - "/root/rpmbuild/RPMS/x86_64/slurm-plugins-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-perlapi-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-slurmdb-direct-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-sql-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-lua-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-devel-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-pam_slurm-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-sjstat-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-slurmdbd-{{ slurm_version }}-1.el6.x86_64.rpm"
        #- "/root/rpmbuild/RPMS/x86_64/slurm-spank-x11-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-torque-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-munge-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-sjobexit-{{ slurm_version }}-1.el6.x86_64.rpm"
    when: slurm_build == True

  - name: add slurm etc dir
    file: path="/etc/slurm" state=directory owner=root group=root mode=0755

  - name: slurmdbd.conf
    template: src=slurmdbd.conf.j2 dest=/etc/slurm/slurmdbd.conf owner=root mode=0640 backup=yes

  - name: restart munge
    service: name=munge state=restarted
    when: mungekeygen.changed and mungekeygen is defined

  - name: start and enable munge
    service: name=munge state=started enabled=yes

  - name: install Slurm ( state=present - not updating )
    yum: name={{ item }} state=present
    with_items: slurm_packages

  - name: pam.d/slurm
    copy: src=pam_slurm dest=/etc/pam.d/slurm owner=root mode=0644

  - name: slurm.conf
    template: src=slurm.conf.j2 dest=/etc/slurm/slurm.conf owner=root mode=0644 backup=yes

  - name: add slurm user
    user: name=slurm shell=/sbin/nologin createhome=no home=/nonexixtent system=yes append=yes

  - name: add slurm log dir
    file: path={{ slurm_log_dir }} state=directory owner=slurm group=slurm mode=0750

  - name: add slurmd tmp dir
    file: "path={{ slurmd_tmp_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurmstate tmp dir
    file: "path={{ slurm_state_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: start and enable slurmdbd
    service: name=slurmdbd state=restarted enabled=yes

  - name: add cluster to accounting
    command: "sacctmgr -i add cluster {{ siteName }}"
    ignore_errors: yes

  - name: start and enable slurmctld
    service: name=slurm state=restarted enabled=yes


